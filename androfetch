#!/data/data/com.termux/files/usr/bin/bash

# Author : laraib07 (https://github.com/laraib07)

readonly CACHE_DIR="$HOME/.cache/androfetch"
readonly CACHE_FILE="$CACHE_DIR/cache"
declare -A cache

# Colors
G='\033[1;32m' #green
W='\033[1;37m' #bold white
off='\033[0m'  #simple white

# ascii_logo
ascii_logo="
        ╲ ▁▂▂▂▁ ╱
        ▄███████▄
       ▄██ ███ ██▄
      ▄███████████▄
   ▄█ ▄▄▄▄▄▄▄▄▄▄▄▄▄ █▄
   ██ █████████████ ██
   ██ █████████████ ██
   ██ █████████████ ██
      █████████████
       ███████████
        ██     ██
        ██     ██
"


# cursor positions - adjust these while changing ascii_logo
top='\033[12A' # move 12 rows up(height of logo)
f='\033[25C'    # move 25 clms forward
savc='\033[s'   # save cursor pos
resc='\033[u'   # restore cursor pos


## FUNCTIONS

#Info printing
function fetch() {
  # Hide the cursor and disable line wrap.
  printf '\e[?25l\e[?7l'

  printf "${G}${ascii_logo}" #print ascii_logo
  printf "${savc}"       #save cursor pos
  printf "${top}${f}"    #move cursor to top

  printf "${G}${cache[user]}${W}@${G}localhost \n${f}"
  printf "${W}----------------- \n${f}"

  printf "${OS}: ${cache[OS]} \n${f}"
  printf "${HOST}: ${cache[Model]} \n${f}"
  printf "${KER}: ${cache[Kernel]} \n${f}"
  printf "${UPT}: ${uptime} \n${f}"
  printf "${PKGS}: ${pkg} \n${f}"
  printf "${SH}: ${cache[Shell]} \n${f}"
  printf "${TERMINAL}: termux \n${f}"
  printf "${CHIP}: ${cache[Chipset]} \n${f}"
  printf "${CPU}: ${cache[CPU]} \n${f}"

  printf "${resc}"       #restore cursor pos
  printf "${off}"        #turn off colors

  # unhide the cursor and unable line wrap.
  printf "\e[?25h\e[?7h\n"
}


function show_help() {
  printf "A pretty system information tool written in bash for termux on android.\n"
  printf "Usage: androfetch [-hci] [-n name]
  -h\t print this usage.
  -c\t build new cache.
  -i\t toggle icon visibility.
  -n\t set user name.\n"
}


function error() {
  printf "$(basename "$0"): $*\n" >&2
  exit 1
}


# Meslo Nerd font preferred for powerline icons
# if you don't use above font you can toggle
# icons to disable it with ’androfetch -i’
# by default its enabled.
function load_icons_texts() {
  # 2 white-spaces are intentional to make whole output pretty with reasonable spacing
  if [[ "${cache[Icon_Toggle]}" == "1" ]]; then
    OS="${W}\uf6a6  "
    HOST="${W}\uf6c3  "
    KER="${W}\uf83c  "
    UPT="${W}\uf49b  "
    PKGS="${W}\uf8d6  "
    SH="${W}\ue7a2  "
    TERMINAL="${W}\uf489  "
    CHIP="${W}\uf2db  "
    CPU="${W}\ue266  "
  fi

  OS="${OS}${G}OS${off}"
  HOST="${HOST}${G}Host${off}"
  KER="${KER}${G}Kernel${off}"
  UPT="${UPT}${G}Uptime${off}"
  PKGS="${PKGS}${G}Packages${off}"
  SH="${SH}${G}Shell${off}"
  TERMINAL="${TERMINAL}${G}Terminal${off}"
  CHIP="${CHIP}${G}Chipset${off}"
  CPU="${CPU}${G}CPU${off}"
}


# toggle icon visibility if icons don't render well
function toggle_icons() {
  if [[ "${cache[Icon_Toggle]}" == "0" ]];then
    cache[Icon_Toggle]=1
  else
    cache[Icon_Toggle]=0
  fi
  load_cache_variables
  create_cache
}


# Set custom user name
function set_user() {
  cache[user]=$1
  load_cache_variables
  create_cache
}


# Get shell name used by user
# and get version info if its zsh, bash or fish.
function get_shell() {
  case ${shell:=${SHELL##*/}} in
    bash)
      ver=$("$SHELL" -c "printf %s \"\$BASH_VERSION\"")
      shell+=" "${ver/-*}
      shell=${shell/\(*\)}
      ;;

    zsh)
      shell=$("$SHELL" --version)
      shell=${shell% *} # removing extra stuff
      ;;

    fish)
      ver=$("$SHELL" --version)
      shell+=" ${ver##* }"
      ;;
  esac

  printf "${shell}"
}


#Get kernel info
function get_kernel() {
  kernel=$(uname -r)
  kernel=${kernel%%-*}
  printf "${kernel}"
}


#Get CPU info
function get_cpu() {
  cpuid=$(grep "Hardware" /proc/cpuinfo)
  cpuid=${cpuid##?*: }
  cpuid=${cpuid%,*}
  printf "${cpuid}"
}


# Load frequently updated info like packages and uptime
function load_variables() {
  #Packages
  pkg="$(grep -c "Package:" $PREFIX/var/lib/dpkg/status) (dpkg)"

  #Uptime
  uptime=$(uptime -p)
  uptime=${uptime:3} # removing 'up '
  uptime=${uptime/hours/hrs}
  uptime=${uptime/minutes/mins}

}


#Load infrequent updated info like android
# version cpu chipset and icon_toggle.
function load_cache_variables() {
    cache=( \
      [user]="${cache[user]:=$(logname)}" \
      [OS]="Android $(getprop ro.build.version.release)" \
      [Model]="$(getprop ro.product.manufacturer) $(getprop ro.product.model)" \
      [Chipset]="$(getprop ro.board.platform)" \
      [Kernel]="$(get_kernel)" \
      [Shell]="$(get_shell)" \
      [CPU]="$(get_cpu)" \
      [Icon_Toggle]="${cache[Icon_Toggle]:=1}" \
    )

}

# Create cache
function create_cache() {
  printf "cache=($(for i in "${!cache[@]}";do printf "[$i]='${cache[$i]}' ";done))\n" > "$CACHE_FILE"
}

# Driver code
function main() {
  # checking cache dir
  if ! [ -d "$CACHE_DIR" ];then
    mkdir -p "$CACHE_DIR"
  fi

  # load cache variables first if cache don't exists
  # else source cache
  # It's important to do this before anything else
  # So custom username and icon_toggle's value don't get deleted
  if [ ! -f "$CACHE_FILE" ];then
    load_cache_variables
  else
    source $CACHE_FILE
  fi

  while getopts ":hcin:" arg ; do
    case "${arg}" in
      h ) show_help; exit 0 ;;
      c ) rm $CACHE_FILE; load_cache_variables ;;
      i ) toggle_icons ;;
      n ) set_user "$OPTARG" ;;
      \?) error "unknown option.";exit 1 ;;
    esac
  done

  if [ ! -f "$CACHE_FILE" ];then
    create_cache
  fi
  ## Start fetching
  load_icons_texts
  load_variables
  fetch

  exit 0
}

main "$@"
